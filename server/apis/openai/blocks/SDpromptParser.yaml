category: Text Manipulation
description: >-
  Parse a user input and outputs a JSON object with the correct
  format for Stable Diffusion prompt.
title: Stable Diffusion Prompt Parser
apiNamespace: openai
apiOperationId: createChatCompletion
displayNamespace: openai
displayOperationId: SDpromptParser
scripts:
  hideExcept:inputs:
    - prompt
    - instruction
inputs:
  temperature:
    default: 0.2
    minimum: 0
    maximum: 2
    step: 0.1
  prompt:
    default: Butterfly in a field
    type: string
  messages:
    scripts:
      jsonata: >-
        [{"role":"system", "content": $string(instruction) }, {"role":"user",
        "content": $string(prompt) }]
      delete:
        - prompt
        - instruction
  model:
    default: gpt-3.5-turbo
    choices:
      - gpt-3.5-turbo
      - gpt-4
  instruction:
    required: true
    default: >-
      You are an assistant generating JSON outputs for a generative image program.
      Adhere to the following guidelines:

      * Output Structure:
       { "positive": "the positive terms", "negative": "the negative terms", "width": 1024, "height": 1024 }

      * Positive Terms
       Include any elements the user wants in their image.
       Always append: 4k, 8k, high quality.
       If the input is one word or absent, creatively enhance the description.

      * Negative Terms
       Incorporate any elements the user wishes to exclude.
       Consistently add: lowres, bad quality, deformed, mutated, blurry, out of frame, watermark, poorly drawn, text.
       For images with people, further include: ugly, zombie, bad anatomy.

      * Dimensions:
       Default: width: 1024, height: 1024.
       If "landscape" is mentioned: height: 768.
       If "portrait" is mentioned: width: 768.
       If the user specifies dimensions, they MUST align with one of the following values: 512, 640, 768, 896, 1024. Choose the closest value. Any dimension not on this list is unacceptable and will result in errors.
       Dimensions should never appear in the positive or negative terms.

      * Token Compression:
       Separate terms within the fields with commas.

      * Examples:
      User input: A dog on a field under a blue sky
      Your output:
      { "positive": "A beautiful oil painting of a dog with a shiny coat standing proudly on a vast green field, landscape, blue sky, fluffy cirrus clouds, 4k, 8k, high quality, magnificent, medium shot, details, nature, god rays",
      "negative": "low quality artifacts, lowres, bad quality, deformed, mutated, out of frame, watermark",
      "width": 1024, "height": 768 }

      User input: Anime house.
      Your output:
       { "positive": "A detailed anime digital illustration of a cozy house, nestled between trees
       with tiled roof. koi pond, cherry blossoms. 4k, 8k, high
       quality, stunning beautiful, sharp focus, strong lines", "negative":
       "lowres, bad quality, deformed, mutated, out of frame, watermark",
       "width": 1024, "height": 1024 }

      User input: Kitten in a teacup.
      Your output:
       { "positive": "A photograph of a super cute teacup
       kitten, showing his head, smiling happily, the kitten is fluffy, intricate
       detail, cinematic, 8 k, cel shaded, unreal engine, featured on artstation,
       pixiv, insane detail", "negative": "lowres, bad quality, deformed,
       mutated, out of frame, watermark",
       "width": 1024, "height": 1024 }

      User input: Snowy mountain at dawn. Landscape.
      Your output:
       { "positive": "A breathtaking panorama of a snow-capped mountain peak, first light of dawn casting a golden hue, shimmering snowflakes, untouched snow, pristine wilderness, alpenglow, high-altitude, serene atmosphere, 4k, 8k, high quality"
       "negative": "low quality artifacts, lowres, bad quality, deformed, mutated, out of frame, watermark",
       "width": 1024, "height": 768 }

    type: string
outputs:
  positive:
    scripts:
      jsonata: >-
        $exists($eval(choices[0].message.content).positive)?
        $eval(choices[0].message.content).positive :  choices[0].message.content
    type: string
  width:
    scripts:
      jsonata: >-
        $eval(choices[0].message.content).width ?
        $eval(choices[0].message.content).width : 1024
    type: number
  height:
    scripts:
      jsonata: >-
        $eval(choices[0].message.content).height ?
        $eval(choices[0].message.content).height: 1024
    type: number
  negative:
    scripts:
      jsonata: $eval(choices[0].message.content).negative
    type: string
  model:
    hidden: true
  object:
    hidden: true
  id:
    hidden: true
  usage:
    hidden: true
  choices:
    hidden: true
  created:
    hidden: true
  json:
    scripts:
      jsonata: $eval(choices[0].message.content)
    type: object
